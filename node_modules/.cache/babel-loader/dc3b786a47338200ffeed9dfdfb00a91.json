{"ast":null,"code":"import _toConsumableArray from \"/Users/ambarmodi/Desktop/Sem-4/WebDevelopment/Project2Wordle/CS5610_project2_shruti_mahvash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/ambarmodi/Desktop/Sem-4/WebDevelopment/Project2Wordle/CS5610_project2_shruti_mahvash/src/components/Alphabet.js\";\nimport React, { useContext, useEffect } from 'react';\nimport './EasyLevel.css';\nimport MainGrid from './MainGrid';\nimport { useState } from 'react';\nimport { AppContext } from './EasyLevel';\nimport '../App.css';\n\n// TODO change it to alphaPos and enteredVal\n\nfunction Alphabet(_ref) {\n  var letterPos = _ref.letterPos,\n    attemptVal = _ref.attemptVal;\n  var _useContext = useContext(AppContext),\n    grid = _useContext.grid,\n    correctWord = _useContext.correctWord,\n    currAttempt = _useContext.currAttempt,\n    disabledLetters = _useContext.disabledLetters,\n    setDisabledLetters = _useContext.setDisabledLetters,\n    yellowedLetters = _useContext.yellowedLetters,\n    setYellowedLetters = _useContext.setYellowedLetters,\n    greenedLetters = _useContext.greenedLetters,\n    setGreenedLetters = _useContext.setGreenedLetters;\n  var alphabet = grid[attemptVal][letterPos];\n\n  // TODO: change the logic here in if else statements\n  var correctPos = correctWord.toUpperCase()[letterPos] === alphabet;\n  var incorrectPos = !correctPos && alphabet !== '' && correctWord.toUpperCase().includes(alphabet);\n  // const almost = () => {\n  //   if(!correct && alphabet !== \"\" && )\n  // }\n\n  // for(let i=0; i<6;i++) {\n  //   if(currAttempt.attempt)\n  // }\n  //console.log('currAttempt:', currAttempt);\n\n  var letterState = currAttempt.attempt > attemptVal && (correctPos ? 'correct' : incorrectPos ? 'almost' : 'error');\n\n  //todo: check if we can use useState or anything instead\n\n  useEffect(function () {\n    if (alphabet != '' && correctPos) {\n      setGreenedLetters(function (prev) {\n        return [].concat(_toConsumableArray(prev), [alphabet]);\n      });\n    }\n    if (alphabet != '' && !correctPos && incorrectPos) {\n      setYellowedLetters(function (prev) {\n        return [].concat(_toConsumableArray(prev), [alphabet]);\n      });\n    }\n    if (alphabet !== '' && !correctPos && !incorrectPos) {\n      setDisabledLetters(function (prev) {\n        return [].concat(_toConsumableArray(prev), [alphabet]);\n      });\n    }\n  }, [currAttempt.attempt]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alphabet\",\n    id: letterState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, alphabet);\n}\nexport default Alphabet;","map":{"version":3,"names":["React","useContext","useEffect","MainGrid","useState","AppContext","Alphabet","letterPos","attemptVal","grid","correctWord","currAttempt","disabledLetters","setDisabledLetters","yellowedLetters","setYellowedLetters","greenedLetters","setGreenedLetters","alphabet","correctPos","toUpperCase","incorrectPos","includes","letterState","attempt","prev"],"sources":["/Users/ambarmodi/Desktop/Sem-4/WebDevelopment/Project2Wordle/CS5610_project2_shruti_mahvash/src/components/Alphabet.js"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport './EasyLevel.css';\nimport MainGrid from './MainGrid';\nimport { useState } from 'react';\nimport { AppContext } from './EasyLevel';\nimport '../App.css';\n\n// TODO change it to alphaPos and enteredVal\n\nfunction Alphabet({ letterPos, attemptVal }) {\n  const {\n    grid,\n    correctWord,\n    currAttempt,\n    disabledLetters,\n    setDisabledLetters,\n    yellowedLetters,\n    setYellowedLetters,\n    greenedLetters,\n    setGreenedLetters,\n  } = useContext(AppContext);\n\n  const alphabet = grid[attemptVal][letterPos];\n\n  // TODO: change the logic here in if else statements\n  const correctPos = correctWord.toUpperCase()[letterPos] === alphabet;\n\n  const incorrectPos =\n    !correctPos &&\n    alphabet !== '' &&\n    correctWord.toUpperCase().includes(alphabet);\n  // const almost = () => {\n  //   if(!correct && alphabet !== \"\" && )\n  // }\n\n  // for(let i=0; i<6;i++) {\n  //   if(currAttempt.attempt)\n  // }\n  //console.log('currAttempt:', currAttempt);\n\n  const letterState =\n    currAttempt.attempt > attemptVal &&\n    (correctPos ? 'correct' : incorrectPos ? 'almost' : 'error');\n\n  //todo: check if we can use useState or anything instead\n\n  useEffect(() => {\n    if (alphabet != '' && correctPos) {\n      setGreenedLetters((prev) => [...prev, alphabet]);\n    }\n    if (alphabet != '' && !correctPos && incorrectPos) {\n      setYellowedLetters((prev) => [...prev, alphabet]);\n    }\n    if (alphabet !== '' && !correctPos && !incorrectPos) {\n      setDisabledLetters((prev) => [...prev, alphabet]);\n    }\n  }, [currAttempt.attempt]);\n\n  return (\n    <div className=\"alphabet\" id={letterState}>\n      {alphabet}\n    </div>\n  );\n}\n\nexport default Alphabet;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,OAAO,iBAAiB;AACxB,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,UAAU,QAAQ,aAAa;AACxC,OAAO,YAAY;;AAEnB;;AAEA,SAASC,QAAQ,OAA4B;EAAA,IAAzBC,SAAS,QAATA,SAAS;IAAEC,UAAU,QAAVA,UAAU;EAAA,kBAWnCP,UAAU,CAACI,UAAU,CAAC;IATxBI,IAAI,eAAJA,IAAI;IACJC,WAAW,eAAXA,WAAW;IACXC,WAAW,eAAXA,WAAW;IACXC,eAAe,eAAfA,eAAe;IACfC,kBAAkB,eAAlBA,kBAAkB;IAClBC,eAAe,eAAfA,eAAe;IACfC,kBAAkB,eAAlBA,kBAAkB;IAClBC,cAAc,eAAdA,cAAc;IACdC,iBAAiB,eAAjBA,iBAAiB;EAGnB,IAAMC,QAAQ,GAAGT,IAAI,CAACD,UAAU,CAAC,CAACD,SAAS,CAAC;;EAE5C;EACA,IAAMY,UAAU,GAAGT,WAAW,CAACU,WAAW,EAAE,CAACb,SAAS,CAAC,KAAKW,QAAQ;EAEpE,IAAMG,YAAY,GAChB,CAACF,UAAU,IACXD,QAAQ,KAAK,EAAE,IACfR,WAAW,CAACU,WAAW,EAAE,CAACE,QAAQ,CAACJ,QAAQ,CAAC;EAC9C;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,IAAMK,WAAW,GACfZ,WAAW,CAACa,OAAO,GAAGhB,UAAU,KAC/BW,UAAU,GAAG,SAAS,GAAGE,YAAY,GAAG,QAAQ,GAAG,OAAO,CAAC;;EAE9D;;EAEAnB,SAAS,CAAC,YAAM;IACd,IAAIgB,QAAQ,IAAI,EAAE,IAAIC,UAAU,EAAE;MAChCF,iBAAiB,CAAC,UAACQ,IAAI;QAAA,oCAASA,IAAI,IAAEP,QAAQ;MAAA,CAAC,CAAC;IAClD;IACA,IAAIA,QAAQ,IAAI,EAAE,IAAI,CAACC,UAAU,IAAIE,YAAY,EAAE;MACjDN,kBAAkB,CAAC,UAACU,IAAI;QAAA,oCAASA,IAAI,IAAEP,QAAQ;MAAA,CAAC,CAAC;IACnD;IACA,IAAIA,QAAQ,KAAK,EAAE,IAAI,CAACC,UAAU,IAAI,CAACE,YAAY,EAAE;MACnDR,kBAAkB,CAAC,UAACY,IAAI;QAAA,oCAASA,IAAI,IAAEP,QAAQ;MAAA,CAAC,CAAC;IACnD;EACF,CAAC,EAAE,CAACP,WAAW,CAACa,OAAO,CAAC,CAAC;EAEzB,oBACE;IAAK,SAAS,EAAC,UAAU;IAAC,EAAE,EAAED,WAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACvCL,QAAQ,CACL;AAEV;AAEA,eAAeZ,QAAQ"},"metadata":{},"sourceType":"module"}