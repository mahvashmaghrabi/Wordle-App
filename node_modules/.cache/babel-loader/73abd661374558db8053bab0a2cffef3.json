{"ast":null,"code":"import _objectSpread from \"/Users/ambarmodi/Desktop/Sem-4/WebDevelopment/Project2Wordle/CS5610_project2_shruti_mahvash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/ambarmodi/Desktop/Sem-4/WebDevelopment/Project2Wordle/CS5610_project2_shruti_mahvash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/ambarmodi/Desktop/Sem-4/WebDevelopment/Project2Wordle/CS5610_project2_shruti_mahvash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ambarmodi/Desktop/Sem-4/WebDevelopment/Project2Wordle/CS5610_project2_shruti_mahvash/src/components/EasyLevel.js\";\nimport React, { useEffect } from 'react';\nimport MainGrid from './MainGrid';\nimport Keyboard from './Keyboard';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport EmptyGrid, { defaultGrid, generateWordSet } from './EmptyGrid';\nimport FinishGame from './FinishGame';\n//import Modal from 'react-modal';\n\nexport var AppContext = createContext();\nfunction EasyLevel(_ref) {\n  var _this = this;\n  var row = _ref.row,\n    col = _ref.col,\n    difficultyLevel = _ref.difficultyLevel;\n  var EasyLevel = function EasyLevel() {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 27\n      }\n    }, \"Easy Level\");\n  };\n  var _useState = useState(defaultGrid),\n    _useState2 = _slicedToArray(_useState, 2),\n    grid = _useState2[0],\n    setGrid = _useState2[1];\n  var _useState3 = useState({\n      attempt: 0,\n      letterPos: 0\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currAttempt = _useState4[0],\n    setCurrAttempt = _useState4[1];\n  var _useState5 = useState(new Set()),\n    _useState6 = _slicedToArray(_useState5, 2),\n    wordSet = _useState6[0],\n    setWordSet = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    disabledLetters = _useState8[0],\n    setDisabledLetters = _useState8[1];\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    yellowedLetters = _useState10[0],\n    setYellowedLetters = _useState10[1];\n  var _useState11 = useState([]),\n    _useState12 = _slicedToArray(_useState11, 2),\n    greenedLetters = _useState12[0],\n    setGreenedLetters = _useState12[1];\n  var _useState13 = useState(''),\n    _useState14 = _slicedToArray(_useState13, 2),\n    correctWord = _useState14[0],\n    setCorrectWord = _useState14[1];\n  var _useState15 = useState({\n      gameOver: false,\n      guessedWord: false\n    }),\n    _useState16 = _slicedToArray(_useState15, 2),\n    gameOver = _useState16[0],\n    setGameOver = _useState16[1];\n  useEffect(function () {\n    generateWordSet(difficultyLevel).then(function (words) {\n      console.log(words);\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n    });\n  }, []);\n  var onSelectKey = function onSelectKey(keyVal) {\n    if (currAttempt.letterPos > col) return;\n    var newGrid = _toConsumableArray(grid);\n    newGrid[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setGrid(newGrid);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letterPos: currAttempt.letterPos + 1\n    });\n  };\n  var onDelete = function onDelete() {\n    if (currAttempt.letterPos === 0) return;\n    var newGrid = _toConsumableArray(grid);\n    newGrid[currAttempt.attempt][currAttempt.letterPos - 1] = '';\n    setGrid(newGrid);\n    setCurrAttempt(_objectSpread({}, currAttempt, {\n      letterPos: currAttempt.letterPos - 1\n    }));\n  };\n  console.log('easylevel:col:', col);\n  var onEnter = function onEnter() {\n    if (currAttempt.letterPos !== col) {\n      alert('Please enter a longer word');\n      return;\n    }\n    console.log('rowval:', row, col);\n    var currentWord = '';\n    for (var i = 0; i < row; i++) {\n      currentWord += grid[currAttempt.attempt][i];\n    }\n    // making lowercase to match case as our wordlist is all lowercase\n    if (wordSet.has(currentWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letterPos: 0\n      });\n    } else {\n      // TODO: remove alert messgae and try to use modal\n      alert('Word not found');\n    }\n    console.log('currentWord:', currentWord);\n    console.log('correctword:', correctWord);\n    if (currentWord.toLowerCase() === correctWord) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: true\n      });\n      return;\n      //alert('You won!! Game ended');\n    }\n\n    console.log('attempt number:', currAttempt.attempt);\n    if (currAttempt.attempt === row - 1) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n      return;\n    }\n    // setCurrAttempt({ attempt: currAttempt.attempt + 1, letterPos: 0 });\n  };\n\n  var main_grid = '';\n  var empty_grid = '';\n  if (difficultyLevel === 'Normal') {\n    main_grid = /*#__PURE__*/React.createElement(MainGrid, {\n      row: 6,\n      col: 6,\n      difficultyLevel: 'Normal',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    });\n    empty_grid = /*#__PURE__*/React.createElement(EmptyGrid, {\n      difficultyLevel: 'Normal',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 18\n      }\n    });\n  }\n  if (difficultyLevel === 'Hard') {\n    main_grid = /*#__PURE__*/React.createElement(MainGrid, {\n      row: 5,\n      col: 7,\n      difficultyLevel: 'Hard',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    });\n    empty_grid = /*#__PURE__*/React.createElement(EmptyGrid, {\n      difficultyLevel: 'Hard',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 18\n      }\n    });\n  }\n  console.log('difficulty level:', difficultyLevel);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      grid: grid,\n      setGrid: setGrid,\n      currAttempt: currAttempt,\n      setCurrAttempt: setCurrAttempt,\n      onSelectKey: onSelectKey,\n      onDelete: onDelete,\n      onEnter: onEnter,\n      correctWord: correctWord,\n      setDisabledLetters: setDisabledLetters,\n      disabledLetters: disabledLetters,\n      setYellowedLetters: setYellowedLetters,\n      yellowedLetters: yellowedLetters,\n      greenedLetters: greenedLetters,\n      setGreenedLetters: setGreenedLetters,\n      setGameOver: setGameOver,\n      gameOver: gameOver\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, empty_grid, main_grid, gameOver.gameOver ? /*#__PURE__*/React.createElement(FinishGame, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 30\n    }\n  }) : /*#__PURE__*/React.createElement(Keyboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 47\n    }\n  })));\n}\nexport default EasyLevel;","map":{"version":3,"names":["React","useEffect","MainGrid","Keyboard","createContext","useState","EmptyGrid","defaultGrid","generateWordSet","FinishGame","AppContext","EasyLevel","row","col","difficultyLevel","grid","setGrid","attempt","letterPos","currAttempt","setCurrAttempt","Set","wordSet","setWordSet","disabledLetters","setDisabledLetters","yellowedLetters","setYellowedLetters","greenedLetters","setGreenedLetters","correctWord","setCorrectWord","gameOver","guessedWord","setGameOver","then","words","console","log","todaysWord","onSelectKey","keyVal","newGrid","onDelete","onEnter","alert","currentWord","i","has","toLowerCase","main_grid","empty_grid"],"sources":["/Users/ambarmodi/Desktop/Sem-4/WebDevelopment/Project2Wordle/CS5610_project2_shruti_mahvash/src/components/EasyLevel.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport MainGrid from './MainGrid';\nimport Keyboard from './Keyboard';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport EmptyGrid, { defaultGrid, generateWordSet } from './EmptyGrid';\nimport FinishGame from './FinishGame';\n//import Modal from 'react-modal';\n\nexport const AppContext = createContext();\nfunction EasyLevel({ row, col, difficultyLevel }) {\n  const EasyLevel = () => <h1>Easy Level</h1>;\n  const [grid, setGrid] = useState(defaultGrid);\n  const [currAttempt, setCurrAttempt] = useState({ attempt: 0, letterPos: 0 });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [yellowedLetters, setYellowedLetters] = useState([]);\n  const [greenedLetters, setGreenedLetters] = useState([]);\n  const [correctWord, setCorrectWord] = useState('');\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false,\n  });\n\n  useEffect(() => {\n    generateWordSet(difficultyLevel).then((words) => {\n      console.log(words);\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n    });\n  }, []);\n\n  const onSelectKey = (keyVal) => {\n    if (currAttempt.letterPos > col) return;\n    const newGrid = [...grid];\n    newGrid[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setGrid(newGrid);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letterPos: currAttempt.letterPos + 1,\n    });\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letterPos === 0) return;\n    const newGrid = [...grid];\n    newGrid[currAttempt.attempt][currAttempt.letterPos - 1] = '';\n    setGrid(newGrid);\n    setCurrAttempt({ ...currAttempt, letterPos: currAttempt.letterPos - 1 });\n  };\n  console.log('easylevel:col:', col);\n  const onEnter = () => {\n    if (currAttempt.letterPos !== col) {\n      alert('Please enter a longer word');\n      return;\n    }\n    console.log('rowval:', row, col);\n    let currentWord = '';\n    for (let i = 0; i < row; i++) {\n      currentWord += grid[currAttempt.attempt][i];\n    }\n    // making lowercase to match case as our wordlist is all lowercase\n    if (wordSet.has(currentWord.toLowerCase())) {\n      setCurrAttempt({ attempt: currAttempt.attempt + 1, letterPos: 0 });\n    } else {\n      // TODO: remove alert messgae and try to use modal\n      alert('Word not found');\n    }\n    console.log('currentWord:', currentWord);\n    console.log('correctword:', correctWord);\n    if (currentWord.toLowerCase() === correctWord) {\n      setGameOver({ gameOver: true, guessedWord: true });\n      return;\n      //alert('You won!! Game ended');\n    }\n    console.log('attempt number:', currAttempt.attempt);\n    if (currAttempt.attempt === row - 1) {\n      setGameOver({ gameOver: true, guessedWord: false });\n      return;\n    }\n    // setCurrAttempt({ attempt: currAttempt.attempt + 1, letterPos: 0 });\n  };\n  let main_grid = '';\n  let empty_grid = '';\n  if (difficultyLevel === 'Normal') {\n    main_grid = <MainGrid row={6} col={6} difficultyLevel={'Normal'} />;\n    empty_grid = <EmptyGrid difficultyLevel={'Normal'} />;\n  }\n  if (difficultyLevel === 'Hard') {\n    main_grid = <MainGrid row={5} col={7} difficultyLevel={'Hard'} />;\n    empty_grid = <EmptyGrid difficultyLevel={'Hard'} />;\n  }\n  console.log('difficulty level:', difficultyLevel);\n\n  return (\n    <div>\n      <AppContext.Provider\n        value={{\n          grid,\n          setGrid,\n          currAttempt,\n          setCurrAttempt,\n          onSelectKey,\n          onDelete,\n          onEnter,\n          correctWord,\n          setDisabledLetters,\n          disabledLetters,\n          setYellowedLetters,\n          yellowedLetters,\n          greenedLetters,\n          setGreenedLetters,\n          setGameOver,\n          gameOver,\n        }}\n      >\n        {/* if(difficultyLevel==='Normal')\n        {<MainGrid row={6} col={6} difficultyLevel={'Normal'} />} */}\n        {/* else{<MainGrid row={5} col={7} difficultyLevel={'Normal'} />} */}\n        {/* <MainGrid row={6} col={6} difficultyLevel={'Normal'} /> */}\n        {empty_grid}\n        {main_grid}\n        {gameOver.gameOver ? <FinishGame /> : <Keyboard />}\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default EasyLevel;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,aAAa,QAAQ,OAAO;AACrC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,SAAS,IAAIC,WAAW,EAAEC,eAAe,QAAQ,aAAa;AACrE,OAAOC,UAAU,MAAM,cAAc;AACrC;;AAEA,OAAO,IAAMC,UAAU,GAAGN,aAAa,EAAE;AACzC,SAASO,SAAS,OAAgC;EAAA;EAAA,IAA7BC,GAAG,QAAHA,GAAG;IAAEC,GAAG,QAAHA,GAAG;IAAEC,eAAe,QAAfA,eAAe;EAC5C,IAAMH,SAAS,GAAG,SAAZA,SAAS;IAAA,oBAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAAmB;EAAA;EAAC,gBACpBN,QAAQ,CAACE,WAAW,CAAC;IAAA;IAAtCQ,IAAI;IAAEC,OAAO;EAAA,iBACkBX,QAAQ,CAAC;MAAEY,OAAO,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAE,CAAC,CAAC;IAAA;IAArEC,WAAW;IAAEC,cAAc;EAAA,iBACJf,QAAQ,CAAC,IAAIgB,GAAG,EAAE,CAAC;IAAA;IAA1CC,OAAO;IAAEC,UAAU;EAAA,iBACoBlB,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAnDmB,eAAe;IAAEC,kBAAkB;EAAA,iBACIpB,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAnDqB,eAAe;IAAEC,kBAAkB;EAAA,kBACEtB,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAjDuB,cAAc;IAAEC,iBAAiB;EAAA,kBACFxB,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA3CyB,WAAW;IAAEC,cAAc;EAAA,kBACF1B,QAAQ,CAAC;MACvC2B,QAAQ,EAAE,KAAK;MACfC,WAAW,EAAE;IACf,CAAC,CAAC;IAAA;IAHKD,QAAQ;IAAEE,WAAW;EAK5BjC,SAAS,CAAC,YAAM;IACdO,eAAe,CAACM,eAAe,CAAC,CAACqB,IAAI,CAAC,UAACC,KAAK,EAAK;MAC/CC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBb,UAAU,CAACa,KAAK,CAACd,OAAO,CAAC;MACzBS,cAAc,CAACK,KAAK,CAACG,UAAU,CAAC;IAClC,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIC,MAAM,EAAK;IAC9B,IAAItB,WAAW,CAACD,SAAS,GAAGL,GAAG,EAAE;IACjC,IAAM6B,OAAO,sBAAO3B,IAAI,CAAC;IACzB2B,OAAO,CAACvB,WAAW,CAACF,OAAO,CAAC,CAACE,WAAW,CAACD,SAAS,CAAC,GAAGuB,MAAM;IAC5DzB,OAAO,CAAC0B,OAAO,CAAC;IAChBtB,cAAc,CAAC;MACbH,OAAO,EAAEE,WAAW,CAACF,OAAO;MAC5BC,SAAS,EAAEC,WAAW,CAACD,SAAS,GAAG;IACrC,CAAC,CAAC;EACJ,CAAC;EAED,IAAMyB,QAAQ,GAAG,SAAXA,QAAQ,GAAS;IACrB,IAAIxB,WAAW,CAACD,SAAS,KAAK,CAAC,EAAE;IACjC,IAAMwB,OAAO,sBAAO3B,IAAI,CAAC;IACzB2B,OAAO,CAACvB,WAAW,CAACF,OAAO,CAAC,CAACE,WAAW,CAACD,SAAS,GAAG,CAAC,CAAC,GAAG,EAAE;IAC5DF,OAAO,CAAC0B,OAAO,CAAC;IAChBtB,cAAc,mBAAMD,WAAW;MAAED,SAAS,EAAEC,WAAW,CAACD,SAAS,GAAG;IAAC,GAAG;EAC1E,CAAC;EACDmB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEzB,GAAG,CAAC;EAClC,IAAM+B,OAAO,GAAG,SAAVA,OAAO,GAAS;IACpB,IAAIzB,WAAW,CAACD,SAAS,KAAKL,GAAG,EAAE;MACjCgC,KAAK,CAAC,4BAA4B,CAAC;MACnC;IACF;IACAR,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE1B,GAAG,EAAEC,GAAG,CAAC;IAChC,IAAIiC,WAAW,GAAG,EAAE;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnC,GAAG,EAAEmC,CAAC,EAAE,EAAE;MAC5BD,WAAW,IAAI/B,IAAI,CAACI,WAAW,CAACF,OAAO,CAAC,CAAC8B,CAAC,CAAC;IAC7C;IACA;IACA,IAAIzB,OAAO,CAAC0B,GAAG,CAACF,WAAW,CAACG,WAAW,EAAE,CAAC,EAAE;MAC1C7B,cAAc,CAAC;QAAEH,OAAO,EAAEE,WAAW,CAACF,OAAO,GAAG,CAAC;QAAEC,SAAS,EAAE;MAAE,CAAC,CAAC;IACpE,CAAC,MAAM;MACL;MACA2B,KAAK,CAAC,gBAAgB,CAAC;IACzB;IACAR,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEQ,WAAW,CAAC;IACxCT,OAAO,CAACC,GAAG,CAAC,cAAc,EAAER,WAAW,CAAC;IACxC,IAAIgB,WAAW,CAACG,WAAW,EAAE,KAAKnB,WAAW,EAAE;MAC7CI,WAAW,CAAC;QAAEF,QAAQ,EAAE,IAAI;QAAEC,WAAW,EAAE;MAAK,CAAC,CAAC;MAClD;MACA;IACF;;IACAI,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEnB,WAAW,CAACF,OAAO,CAAC;IACnD,IAAIE,WAAW,CAACF,OAAO,KAAKL,GAAG,GAAG,CAAC,EAAE;MACnCsB,WAAW,CAAC;QAAEF,QAAQ,EAAE,IAAI;QAAEC,WAAW,EAAE;MAAM,CAAC,CAAC;MACnD;IACF;IACA;EACF,CAAC;;EACD,IAAIiB,SAAS,GAAG,EAAE;EAClB,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIrC,eAAe,KAAK,QAAQ,EAAE;IAChCoC,SAAS,gBAAG,oBAAC,QAAQ;MAAC,GAAG,EAAE,CAAE;MAAC,GAAG,EAAE,CAAE;MAAC,eAAe,EAAE,QAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;IACnEC,UAAU,gBAAG,oBAAC,SAAS;MAAC,eAAe,EAAE,QAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;EACvD;EACA,IAAIrC,eAAe,KAAK,MAAM,EAAE;IAC9BoC,SAAS,gBAAG,oBAAC,QAAQ;MAAC,GAAG,EAAE,CAAE;MAAC,GAAG,EAAE,CAAE;MAAC,eAAe,EAAE,MAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;IACjEC,UAAU,gBAAG,oBAAC,SAAS;MAAC,eAAe,EAAE,MAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;EACrD;EACAd,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAExB,eAAe,CAAC;EAEjD,oBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,UAAU,CAAC,QAAQ;IAClB,KAAK,EAAE;MACLC,IAAI,EAAJA,IAAI;MACJC,OAAO,EAAPA,OAAO;MACPG,WAAW,EAAXA,WAAW;MACXC,cAAc,EAAdA,cAAc;MACdoB,WAAW,EAAXA,WAAW;MACXG,QAAQ,EAARA,QAAQ;MACRC,OAAO,EAAPA,OAAO;MACPd,WAAW,EAAXA,WAAW;MACXL,kBAAkB,EAAlBA,kBAAkB;MAClBD,eAAe,EAAfA,eAAe;MACfG,kBAAkB,EAAlBA,kBAAkB;MAClBD,eAAe,EAAfA,eAAe;MACfE,cAAc,EAAdA,cAAc;MACdC,iBAAiB,EAAjBA,iBAAiB;MACjBK,WAAW,EAAXA,WAAW;MACXF,QAAQ,EAARA;IACF,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAMDmB,UAAU,EACVD,SAAS,EACTlB,QAAQ,CAACA,QAAQ,gBAAG,oBAAC,UAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,gBAAG,oBAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAC9B,CAClB;AAEV;AAEA,eAAerB,SAAS"},"metadata":{},"sourceType":"module"}